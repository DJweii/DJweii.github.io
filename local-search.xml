<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Bean的生命周期</title>
    <link href="/2022/09/19/Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2022/09/19/Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h1><p><img src="https://djwweii-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220919112913694.png"></p><h2 id="1-实例化bean：反射的方式生成对象"><a href="#1-实例化bean：反射的方式生成对象" class="headerlink" title="1. 实例化bean：反射的方式生成对象"></a>1. 实例化bean：反射的方式生成对象</h2><h2 id="2-填充bean的属性：populateBean-循环依赖的问题（三级缓存）"><a href="#2-填充bean的属性：populateBean-循环依赖的问题（三级缓存）" class="headerlink" title="2. 填充bean的属性：populateBean(),循环依赖的问题（三级缓存）"></a>2. 填充bean的属性：populateBean(),循环依赖的问题（三级缓存）</h2><h2 id="3-调用aware接口相关的方法：invokeAwareMethod（完成BeanName-BeanFactory-BeanClassLoader对象的属性设置）"><a href="#3-调用aware接口相关的方法：invokeAwareMethod（完成BeanName-BeanFactory-BeanClassLoader对象的属性设置）" class="headerlink" title="3. 调用aware接口相关的方法：invokeAwareMethod（完成BeanName,BeanFactory,BeanClassLoader对象的属性设置）"></a>3. 调用aware接口相关的方法：invokeAwareMethod（完成BeanName,BeanFactory,BeanClassLoader对象的属性设置）</h2><h2 id="4-调用BeanPostProcessor中的前置处理方法：使用比较多的有（ApplicationContextPostProcessor-设置ApplicationContext-Evironment-ResourceLoader-EmbeddValueResolver等对象）"><a href="#4-调用BeanPostProcessor中的前置处理方法：使用比较多的有（ApplicationContextPostProcessor-设置ApplicationContext-Evironment-ResourceLoader-EmbeddValueResolver等对象）" class="headerlink" title="4. 调用BeanPostProcessor中的前置处理方法：使用比较多的有（ApplicationContextPostProcessor,设置ApplicationContext,Evironment,ResourceLoader,EmbeddValueResolver等对象）"></a>4. 调用BeanPostProcessor中的前置处理方法：使用比较多的有（ApplicationContextPostProcessor,设置ApplicationContext,Evironment,ResourceLoader,EmbeddValueResolver等对象）</h2><h2 id="5-调用initmethod方法：-invokeinitmethod-判断是否实现了initializingBean接口，如果有，调用afterPropertiesSet方法，没有就不调用"><a href="#5-调用initmethod方法：-invokeinitmethod-判断是否实现了initializingBean接口，如果有，调用afterPropertiesSet方法，没有就不调用" class="headerlink" title="5. 调用initmethod方法：  invokeinitmethod(),判断是否实现了initializingBean接口，如果有，调用afterPropertiesSet方法，没有就不调用"></a>5. 调用initmethod方法：  invokeinitmethod(),判断是否实现了initializingBean接口，如果有，调用afterPropertiesSet方法，没有就不调用</h2><h2 id="6-调用BeanPostProcessor的后置处理方法：spring的aop就是在此处实现的，AbstractAutoProxyCreator"><a href="#6-调用BeanPostProcessor的后置处理方法：spring的aop就是在此处实现的，AbstractAutoProxyCreator" class="headerlink" title="6. 调用BeanPostProcessor的后置处理方法：spring的aop就是在此处实现的，AbstractAutoProxyCreator"></a>6. 调用BeanPostProcessor的后置处理方法：spring的aop就是在此处实现的，AbstractAutoProxyCreator</h2><h2 id="7-获取到完整的对象，可以通过getBean的方式来进行对象的获取"><a href="#7-获取到完整的对象，可以通过getBean的方式来进行对象的获取" class="headerlink" title="7. 获取到完整的对象，可以通过getBean的方式来进行对象的获取"></a>7. 获取到完整的对象，可以通过getBean的方式来进行对象的获取</h2><h2 id="8-销毁流程，1、判断是否实现了DispoableBean接口，2、调用destroyMethod方法"><a href="#8-销毁流程，1、判断是否实现了DispoableBean接口，2、调用destroyMethod方法" class="headerlink" title="8. 销毁流程，1、判断是否实现了DispoableBean接口，2、调用destroyMethod方法"></a>8. 销毁流程，1、判断是否实现了DispoableBean接口，2、调用destroyMethod方法</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bean</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello</title>
    <link href="/2022/09/18/hello-world/"/>
    <url>/2022/09/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
