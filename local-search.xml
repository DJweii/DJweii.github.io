<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringIOC的理解，原理与实现</title>
    <link href="/2022/08/01/GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <url>/2022/08/01/GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    
    <content type="html"><![CDATA[<p><img src="https://djwweii-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220920104202201.png" alt="image-20220920104202201"></p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringIOC的理解，原理与实现</title>
    <link href="/2022/07/30/SpringIOC/"/>
    <url>/2022/07/30/SpringIOC/</url>
    
    <content type="html"><![CDATA[<h1 id="谈谈SpringIOC的理解，原理与实现"><a href="#谈谈SpringIOC的理解，原理与实现" class="headerlink" title="谈谈SpringIOC的理解，原理与实现"></a>谈谈SpringIOC的理解，原理与实现</h1><p>Spring 通过 IoC 容器来管理所有 Java 对象的实例化和初始化，控制对象与对象之间的依赖关系。我们将由 IoC 容器管理的 Java 对象称为 Spring Bean，它与使用关键字 new 创建的 Java 对象没有任何区别。</p><p>IoC 利用 Java 的反射机制，根据类名生成相应的对象（即 Spring Bean），并根据依赖关系将这个对象注入到依赖它的对象中。</p><h2 id="总："><a href="#总：" class="headerlink" title="总："></a>总：</h2><h3 id="控制反转（一种设计思想，优点：松耦合）："><a href="#控制反转（一种设计思想，优点：松耦合）：" class="headerlink" title="控制反转（一种设计思想，优点：松耦合）："></a>控制反转（一种设计思想，优点：松耦合）：</h3><p>​理论思想，原来的对象是由使用者来进行控制，有了spring之后，可以把整个对象交给spring来帮我们进行管理</p><h3 id="DI："><a href="#DI：" class="headerlink" title="DI："></a>DI：</h3><p>​依赖注入，把对应的属性的值注入到具体的对象中，@Autowired,populateBean完成属性值的注入</p><h3 id="容器："><a href="#容器：" class="headerlink" title="容器："></a>容器：</h3><p>​存储对象，使用map结构来存储，在spring中一般存在三级缓存，singletonObjects存放完整的bean对象，整个bean的生命周期，从创建到使用到摧毁的过程全部都是由容器来管理（bean的生命周期）</p><h2 id="面试说法："><a href="#面试说法：" class="headerlink" title="面试说法："></a>面试说法：</h2><p>​具体的细节我记不太清了，但是spring中的bean都是通过反射的方式生成的，同时其中包含了很多的扩展点，比如最常用的对BeanFactory的扩展，对bean的扩展（对占位符的处理），除此之外，ioc中最核心的也就是填充具体bean属性，和生命周期（背一下）。</p><h2 id="spring-IOC的底层实现"><a href="#spring-IOC的底层实现" class="headerlink" title="spring IOC的底层实现"></a>spring IOC的底层实现</h2><p>底层实现：工作原理，过程，数据结构，流程，设计模式，设计思想</p><p>你对他的理解和你了解过的实现过程</p><p>反射，工厂，设计模式（会的说，不会的不说），关键的几个方法</p><p>createBeanFactory,getBean,doGetBean,createBean,doCreateBean,createBeanInstannce,populateBean,initializingBean</p><p>1、先通过createBeanFactory创建出一个Bean工厂（DefaultListableBeanFactory）</p><p>2、开始循环创建对象，因为容器中的bean默认都是单例的，所以优先通过getBean，doGetBean从容器中查找，找不到的话，</p><p>3、通过createBean,doCreateBean方法，以反射的反射创建对象，一般情况下使用的是无参的构造方法（getDeclareConstructor,newInstance）</p><p>4、进行对象的属性填充populateBean</p><p>5、进行其他的初始化操作（initializingBean）</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IOC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring是如何解决循环依赖的问题的？</title>
    <link href="/2022/07/30/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/07/30/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring是如何解决循环依赖的问题的？"><a href="#Spring是如何解决循环依赖的问题的？" class="headerlink" title="Spring是如何解决循环依赖的问题的？"></a>Spring是如何解决循环依赖的问题的？</h1><p>三级缓存，提前暴露对象，aop</p><h2 id="总："><a href="#总：" class="headerlink" title="总："></a>总：</h2><p>什么是循环依赖问题，A依赖B，B依赖A</p><h2 id="分："><a href="#分：" class="headerlink" title="分："></a>分：</h2><p>先说明bean的创建过程：实例化，初始化（填充属性）</p><h3 id="Spring-解决循环依赖的过程："><a href="#Spring-解决循环依赖的过程：" class="headerlink" title="Spring 解决循环依赖的过程："></a>Spring 解决循环依赖的过程：</h3><ol><li>先创建 A 对象，并将创建出来的 A 对象放到 Spring 的三级缓存中；</li><li>此时 A 对象的 b 属性为空，需要填充 b 属性，到缓存中查询 B 对象，没有查到，触发 B 对象的创建流程；</li><li>创建 B 对象，并将创建出来的 B 对象放到 Spring 的三级缓存中；</li><li>B 对象的 a 属性为空，需要填充 a 属性，随后在缓存中找到 A 对象，完成填充注入；</li><li>最后再对 A 对象的 b 属性进行填充，从缓存中顺利拿到 B 对象，完成属性注入，循环依赖到此解决。</li></ol><p>其实就是递归调用ApplicationContext.getBean()方法获取对象的实例在一层层返回，如A需要b的实例（调用ApplicationContext.getBean()方法），去缓存查找发现没有，然后创建B对象实例（放入三级缓存），B调用getBean()属性注入a属性发现缓存中有，设置属性a，然后是A调用的getBean()方法递归的返回，也就是将B对象的实例返回，此时就会将该实例设置到A对象的属性b中。</p><h3 id="Spring-的-一、二、三级缓存的作用是什么呢？"><a href="#Spring-的-一、二、三级缓存的作用是什么呢？" class="headerlink" title="Spring 的 一、二、三级缓存的作用是什么呢？"></a>Spring 的 一、二、三级缓存的作用是什么呢？</h3><h4 id="singletonObjects："><a href="#singletonObjects：" class="headerlink" title="singletonObjects："></a>singletonObjects：</h4><p>一级缓存，用于存放完整的 bean，从该缓存中取出的 bean 可以直接使用；</p><h4 id="earlySingletonObjects："><a href="#earlySingletonObjects：" class="headerlink" title="earlySingletonObjects："></a>earlySingletonObjects：</h4><p>二级缓存，存放提前暴露的 bean，bean 是不完整的，未完成属性注入和执行 init 方法，用于解决循环依赖；</p><h4 id="singletonFactories："><a href="#singletonFactories：" class="headerlink" title="singletonFactories："></a>singletonFactories：</h4><p>三级缓存，对初始化后的 bean 完成 AOP 代理操作，bean 初始化完成之后才生成代理，而不是实例化之后就生成代理，保证了bean的生命周期。</p><p>Spring实例化bean是通过ApplicationContext.getBean()方法来进行的。如果要获取的对象依赖了另一个对象，那么其首先会创建当前对象，然后通过递归的调用ApplicationContext.getBean()方法来获取所依赖的对象，最后将获取到的对象注入到当前对象中。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>循环依赖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bean的生命周期</title>
    <link href="/2022/07/28/Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2022/07/28/Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h1><p><img src="https://djwweii-img.oss-cn-hangzhou.aliyuncs.com/img/image-20220919112913694.png"></p><h2 id="1-实例化bean：反射的方式生成对象"><a href="#1-实例化bean：反射的方式生成对象" class="headerlink" title="1. 实例化bean：反射的方式生成对象"></a>1. 实例化bean：反射的方式生成对象</h2><h2 id="2-填充bean的属性：populateBean-循环依赖的问题（三级缓存）"><a href="#2-填充bean的属性：populateBean-循环依赖的问题（三级缓存）" class="headerlink" title="2. 填充bean的属性：populateBean(),循环依赖的问题（三级缓存）"></a>2. 填充bean的属性：populateBean(),循环依赖的问题（三级缓存）</h2><h2 id="3-调用aware接口相关的方法：invokeAwareMethod（完成BeanName-BeanFactory-BeanClassLoader对象的属性设置）"><a href="#3-调用aware接口相关的方法：invokeAwareMethod（完成BeanName-BeanFactory-BeanClassLoader对象的属性设置）" class="headerlink" title="3. 调用aware接口相关的方法：invokeAwareMethod（完成BeanName,BeanFactory,BeanClassLoader对象的属性设置）"></a>3. 调用aware接口相关的方法：invokeAwareMethod（完成BeanName,BeanFactory,BeanClassLoader对象的属性设置）</h2><h2 id="4-调用BeanPostProcessor中的前置处理方法：使用比较多的有（ApplicationContextPostProcessor-设置ApplicationContext-Evironment-ResourceLoader-EmbeddValueResolver等对象）"><a href="#4-调用BeanPostProcessor中的前置处理方法：使用比较多的有（ApplicationContextPostProcessor-设置ApplicationContext-Evironment-ResourceLoader-EmbeddValueResolver等对象）" class="headerlink" title="4. 调用BeanPostProcessor中的前置处理方法：使用比较多的有（ApplicationContextPostProcessor,设置ApplicationContext,Evironment,ResourceLoader,EmbeddValueResolver等对象）"></a>4. 调用BeanPostProcessor中的前置处理方法：使用比较多的有（ApplicationContextPostProcessor,设置ApplicationContext,Evironment,ResourceLoader,EmbeddValueResolver等对象）</h2><h2 id="5-调用initmethod方法：-invokeinitmethod-判断是否实现了initializingBean接口，如果有，调用afterPropertiesSet方法，没有就不调用"><a href="#5-调用initmethod方法：-invokeinitmethod-判断是否实现了initializingBean接口，如果有，调用afterPropertiesSet方法，没有就不调用" class="headerlink" title="5. 调用initmethod方法：  invokeinitmethod(),判断是否实现了initializingBean接口，如果有，调用afterPropertiesSet方法，没有就不调用"></a>5. 调用initmethod方法：  invokeinitmethod(),判断是否实现了initializingBean接口，如果有，调用afterPropertiesSet方法，没有就不调用</h2><h2 id="6-调用BeanPostProcessor的后置处理方法：spring的aop就是在此处实现的，AbstractAutoProxyCreator"><a href="#6-调用BeanPostProcessor的后置处理方法：spring的aop就是在此处实现的，AbstractAutoProxyCreator" class="headerlink" title="6. 调用BeanPostProcessor的后置处理方法：spring的aop就是在此处实现的，AbstractAutoProxyCreator"></a>6. 调用BeanPostProcessor的后置处理方法：spring的aop就是在此处实现的，AbstractAutoProxyCreator</h2><h2 id="7-获取到完整的对象，可以通过getBean的方式来进行对象的获取"><a href="#7-获取到完整的对象，可以通过getBean的方式来进行对象的获取" class="headerlink" title="7. 获取到完整的对象，可以通过getBean的方式来进行对象的获取"></a>7. 获取到完整的对象，可以通过getBean的方式来进行对象的获取</h2><h2 id="8-销毁流程，1、判断是否实现了DispoableBean接口，2、调用destroyMethod方法"><a href="#8-销毁流程，1、判断是否实现了DispoableBean接口，2、调用destroyMethod方法" class="headerlink" title="8. 销毁流程，1、判断是否实现了DispoableBean接口，2、调用destroyMethod方法"></a>8. 销毁流程，1、判断是否实现了DispoableBean接口，2、调用destroyMethod方法</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bean</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务启动参数</title>
    <link href="/2022/07/15/%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0/"/>
    <url>/2022/07/15/%E6%A1%86%E6%9E%B6%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><p><code>/usr/loca/nacos</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/nacos/bin<br><br>sh startup.sh -m standalone<br><br>======== or  ======== <span class="hljs-comment"># 使用脚本启动</span><br><span class="hljs-built_in">cd</span> /usr/local/nacos<br><br>sh nacos.sh start<br></code></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a><strong>访问</strong></h2><p><a href="http://192.168.11.133:8848/nacos">http://192.168.11.133:8848/nacos</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>指令</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
